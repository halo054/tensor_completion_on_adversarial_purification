ngpus: 1, adv_batch_size: 64
starting the model and loader...
using cifar10 wideresnet-28-10...
diffusion_type: TRLRF
Files already downloaded and verified
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "D:\Coding\Python\Anacoda\lib\multiprocessing\spawn.py", line 116, in spawn_main
    exitcode = _main(fd, parent_sentinel)
  File "D:\Coding\Python\Anacoda\lib\multiprocessing\spawn.py", line 125, in _main
    prepare(preparation_data)
  File "D:\Coding\Python\Anacoda\lib\multiprocessing\spawn.py", line 236, in prepare
    _fixup_main_from_path(data['init_main_from_path'])
  File "D:\Coding\Python\Anacoda\lib\multiprocessing\spawn.py", line 287, in _fixup_main_from_path
    main_content = runpy.run_path(main_path,
  File "D:\Coding\Python\Anacoda\lib\runpy.py", line 268, in run_path
    return _run_module_code(code, init_globals, run_name,
  File "D:\Coding\Python\Anacoda\lib\runpy.py", line 97, in _run_module_code
    _run_code(code, mod_globals, init_globals,
  File "D:\Coding\Python\Anacoda\lib\runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "c:\users\halo054\desktop\riken\tensor completion on adversarial attack\eval_tc\eval_tc.py", line 398, in <module>
    robustness_eval(args,config)
  File "c:\users\halo054\desktop\riken\tensor completion on adversarial attack\eval_tc\eval_tc.py", line 270, in robustness_eval
    x_val, y_val = load_data(args, adv_batch_size)
  File "C:\Users\halo054\Desktop\RIKEN\Tensor Completion on Adversarial attack\Eval_TC\utils.py", line 272, in load_data
    x_val, y_val = next(iter(val_loader))
  File "D:\Coding\Python\Anacoda\lib\site-packages\torch\utils\data\dataloader.py", line 442, in __iter__
    return self._get_iterator()
  File "D:\Coding\Python\Anacoda\lib\site-packages\torch\utils\data\dataloader.py", line 388, in _get_iterator
    return _MultiProcessingDataLoaderIter(self)
  File "D:\Coding\Python\Anacoda\lib\site-packages\torch\utils\data\dataloader.py", line 1043, in __init__
    w.start()
  File "D:\Coding\Python\Anacoda\lib\multiprocessing\process.py", line 121, in start
    self._popen = self._Popen(self)
  File "D:\Coding\Python\Anacoda\lib\multiprocessing\context.py", line 224, in _Popen
    return _default_context.get_context().Process._Popen(process_obj)
  File "D:\Coding\Python\Anacoda\lib\multiprocessing\context.py", line 327, in _Popen
    return Popen(process_obj)
  File "D:\Coding\Python\Anacoda\lib\multiprocessing\popen_spawn_win32.py", line 45, in __init__
    prep_data = spawn.get_preparation_data(process_obj._name)
  File "D:\Coding\Python\Anacoda\lib\multiprocessing\spawn.py", line 154, in get_preparation_data
    _check_not_importing_main()
  File "D:\Coding\Python\Anacoda\lib\multiprocessing\spawn.py", line 134, in _check_not_importing_main
    raise RuntimeError('''
RuntimeError: 
        An attempt has been made to start a new process before the
        current process has finished its bootstrapping phase.

        This probably means that you are not using fork to start your
        child processes and you have forgotten to use the proper idiom
        in the main module:

            if __name__ == '__main__':
                freeze_support()
                ...

        The "freeze_support()" line can be omitted if the program
        is not going to be frozen to produce an executable.
